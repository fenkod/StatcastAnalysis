---
title: "Statcast Analysis"
author: ""
date: ""
output:
  html_document:
    df_print: paged
  pdf_document: default
  word_document: default
---


```{r setup, include=FALSE}

pitcherid = 453286


knitr::opts_chunk$set(echo = F)

require(baseballr)
require(dplyr)
require(ggplot2)
require(msm)
require(purrr)
require(rvest)
require(kableExtra)

master = read.csv("http://crunchtimebaseball.com/master.csv") %>%
  mutate(mlb_name = as.character(mlb_name),
         mlb_id = as.numeric(as.character(mlb_id))) %>%
  dplyr::select(mlb_name, mlb_id, fg_name, fg_id)

master1 = master %>%
  dplyr::filter(mlb_id == pitcherid) %>%
    dplyr::select(mlb_name, mlb_id, fg_name, fg_id)

data = scrape_statcast_savant_pitcher(start_date = "2018-03-31",
                                      end_date = "2018-10-01", pitcherid = master1$mlb_id) %>%
  arrange(game_pk, inning, at_bat_number, pitch_number) %>%
  mutate(Type = ifelse(game_date < as.Date("2018-07-14"),"First Half", "Second Half")) %>%
  mutate(ID = paste0(game_pk, inning, at_bat_number)) %>%
  dplyr::filter(pitch_name != "")
```

  
    
**Pitch season stats vesus league averages**  

```{r, echo = F, message=FALSE}
league = data.frame(Season = 2018, `K%` = "21.6 %", `BB%` = "8.0 %", `HR/FB` = "13.1 %",
                    BABIP = 0.291, ERA = 4.19, FIP = 4.21,
                    xFIP = 4.16, SIERA = 4.22, check.names = F)

scrapeURL = paste0("https://www.fangraphs.com/statss.aspx?playerid=",
                                       as.character(master1$fg_id), "&position=P")
stats1 = read_html(scrapeURL) %>%
  html_nodes('.rgMasterTable') %>% 
    # Extract the raw text as a table
  html_table() %>%
  .[[1]] %>%
  dplyr::filter(Season == "2018") %>%
  dplyr::select(Season, ERA,'HR/FB', FIP)

stats2 = read_html(scrapeURL) %>%
  html_nodes('.rgMasterTable') %>% 
    # Extract the raw text as a table
  html_table() %>%
  .[[3]] %>%
  dplyr::filter(Season == "2018" & Team != "Average") %>%
  dplyr::select(Season, 'K%', 'BB%', BABIP)

stats3 = read_html(scrapeURL) %>%
  html_nodes('.rgMasterTable') %>% 
    # Extract the raw text as a table
  html_table() %>%
  .[[4]] %>%
  dplyr::filter(Season == "2018") %>%
  dplyr::select(Season, xFIP, SIERA)

left_join(stats1, stats2) %>%
  left_join(., stats3) %>%
  dplyr::select(Season, 'K%', 'BB%', 'HR/FB',
                BABIP, ERA, FIP, xFIP, SIERA) %>%
  rbind(., league) %>%
  # mutate_each(., funs(ifelse(grepl("%", .),
  #                            as.numeric(gsub("%", "", .)),
  #                            as.numeric(.)))) %>%
  # mutate_each(., funs(cell_spec(.,
  #                        background = ifelse(.[1] < .[2],
  #                                            "lightblue","salmon")))) %>%
  # dplyr::rename(K = 'K%') %>%
  # mutate(K = cell_spec(K,
  #                        background = ifelse(K[1] < K[2],
  #                                           "salmon","lightblue"))) %>%
  # dplyr::rename('K%' = K) %>%
  # mutate(ERA = cell_spec(ERA,
  #                        background = ifelse(ERA[1] < ERA[2],
  #                                            "lightblue","salmon")),
  #        FIP = cell_spec(FIP,
  #                        background = ifelse(FIP[1] < FIP[2],
  #                                            "lightblue","salmon")),
  #        xFIP = cell_spec(xFIP,
  #                        background = ifelse(xFIP[1] < xFIP[2],
  #                                            "lightblue","salmon")),
  #        BABIP = cell_spec(BABIP,
  #                        background = ifelse(BABIP[1] < BABIP[2],
  #                                            "lightblue","salmon")),
  #        SIERA = cell_spec(SIERA,
  #                        background = ifelse(SIERA[1] < SIERA[2],
  #                                            "lightblue","salmon"))) %>%
  slice(1) %>%
  rbind(., league) %>%
  mutate(Name = c(first(data$player_name), "League Avg")) %>%
  dplyr::select(Name, Season, 'K%', 'BB%', 'HR/FB',
                BABIP, ERA, FIP, xFIP, SIERA) %>%
  knitr::kable(format = "markdown")


```
---  
  
   
   
**What was the first pitch that he threw to the batter**  

```{r, echo=FALSE}
data %>%
  dplyr::rename(Pitch = pitch_name) %>%
  group_by(Pitch) %>%
  dplyr::filter(pitch_number == 1) %>%
  count(Pitch) %>%
  ungroup() %>%
  dplyr::rename(Proportion = n) %>%
  mutate(`First Pitch %` = paste(round(100 * Proportion/sum(Proportion), 1), "%")) %>%
  dplyr::select(-Proportion)  %>%
  knitr::kable(format = "markdown")
```
---  
  
   
   
**Total Season Pitch Proportions**  

```{r, echo=FALSE}
pitcher.table = table(data$pitch_name)
prop.table(pitcher.table) %>%
  as.data.frame() %>%
  dplyr::rename(prop = Freq) %>%
  mutate(Proportion = paste(round(100*prop, 1), "%")) %>%
  dplyr::rename(`Pitch Name` = Var1) %>%
  dplyr::select(-prop) %>%
  knitr::kable(format = "markdown")
```
---  
  
   
   
**First Half Pitch Proportions**  

```{r, echo=FALSE}
pitcher.table = table(data$pitch_name[data$Type == "First Half"])
prop.table(pitcher.table) %>%
  as.data.frame() %>%
  dplyr::rename(prop = Freq) %>%
  mutate(Proportion = paste(round(100*prop, 1), "%")) %>%
  dplyr::rename(`Pitch Name` = Var1) %>%
  dplyr::select(-prop) %>%
  knitr::kable(format = "markdown")
```
---  
  
   
   
**Second Half Pitch Proportions**  

 
```{r, echo=FALSE}

pitcher.table = table(data$pitch_name[data$Type == "Second Half"])
prop.table(pitcher.table) %>%
  as.data.frame() %>%
  dplyr::rename(prop = Freq) %>%
  mutate(Proportion = paste(round(100*prop, 1), "%")) %>%
  dplyr::rename(`Pitch Name` = Var1) %>%
  dplyr::select(-prop) %>%
  knitr::kable(format = "markdown")
```
---  
  
   
   
**Here is the probability of throwing the next pitch, given the pitch he just threw**  

```{r, echo=FALSE}

pitcher.matrix = statetable.msm(pitch_name, ID, data = data)
transition.matrix = round(t(t(pitcher.matrix) / rep(rowSums(pitcher.matrix), each = ncol(pitcher.matrix))),3)
x = data.frame(matrix(as.numeric(100*transition.matrix), byrow = F, nrow = ncol(pitcher.matrix)),
              row.names = dimnames(transition.matrix)[[1]])
names(x) = row.names(x)
x %>%
  knitr::kable(format = "markdown")

```
---  
  
   
   
**Pitch Velocity Through Season**  

```{r, echo=FALSE, message=F}

data %>%
  mutate(Name = paste(player_name, "Pitches", game_year)) %>%
  dplyr::rename(Pitch = pitch_name) %>%
  group_by(Pitch) %>%
  arrange(game_date, at_bat_number, pitch_number) %>%
  mutate(counter = row_number(Pitch)) %>%
  ggplot(., aes(counter, release_speed, col = Pitch)) +
  geom_path(alpha = 0.5, size = rel(1.1)) +
  xlab("Number of Pitches Thrown") + ylab("Release Speed (mph)") +
  stat_smooth(se = F, alpha = 1) +
  theme_bw() + facet_wrap(~Name) +
  theme(strip.background = element_rect(fill = "lightblue"),
        strip.text = element_text(colour = 1, face = "bold", size = rel(1.2)),
        legend.position = "top",
        panel.grid = element_blank(),
        legend.title = element_blank())

```
---  
  
   
   
**Zone Profile - All Pitch Types**

```{r, echo = F, message=FALSE}


zones = rbind(data.frame(x = c(1, 2, 2, 1, 1),
                         z = c(4, 4, 3, 3, 4),
                         zone = 1),
              data.frame(x = c(2, 3, 3, 2, 2),
                         z = c(4, 4, 3, 3, 4),
                         zone = 2),
              data.frame(x = c(3, 4, 4, 3, 3),
                         z = c(4, 4, 3, 3, 4),
                         zone = 3),
              data.frame(x = c(1, 2, 2, 1, 1),
                         z = c(3, 3, 2, 2, 3),
                         zone = 4),
              data.frame(x = c(2, 3, 3, 2, 2),
                         z = c(3, 3, 2, 2, 3),
                         zone = 5),
              data.frame(x = c(3, 4, 4, 3, 3),
                         z = c(3, 3, 2, 2, 3),
                         zone = 6),
              data.frame(x = c(1, 2, 2, 1, 1),
                         z = c(2, 2, 1, 1, 2),
                         zone = 7),
              data.frame(x = c(2, 3, 3, 2, 2),
                         z = c(2, 2, 1, 1, 2),
                         zone = 8),
              data.frame(x = c(3, 4, 4, 3, 3),
                         z = c(2, 2, 1, 1, 2),
                         zone = 9),
              data.frame(x = c(0, 2.5, 2.5, 1, 1, 0, 0),
                         z = c(5, 5, 4, 4, 2.5, 2.5, 5),
                         zone = 11),
              data.frame(x = c(2.5, 5, 5, 4, 4, 2.5, 2.5),
                         z = c(5, 5, 2.5, 2.5, 4, 4, 5),
                         zone = 12),
              data.frame(x = c(0, 1, 1, 2.5, 2.5, 0, 0),
                         z = c(2.5, 2.5, 1, 1, 0, 0, 2.5),
                         zone = 13),
              data.frame(x = c(2.5, 2.5, 4, 4, 5, 5, 2.5),
                         z = c(0, 1, 1, 2.5, 2.5, 0, 0),
                         zone = 14))
zones$zone = as.integer(zones$zone)
zone2 = data.frame(zone = c(1:9, 11:14),
                   plotx = c(1.5, 2.5, 3.5,
                         1.5, 2.5, 3.5,
                         1.5, 2.5, 3.5,
                         0.5, 4.5, 0.5, 4.5),
                   plotz = c(3.5, 3.5, 3.5,
                         2.5, 2.5, 2.5,
                         1.5, 1.5, 1.5,
                         4.5, 4.5, 0.5, 0.5))
zone2$zone = as.integer(zone2$zone)
            
data %>%
  group_by(zone) %>%
  tally() %>%
  right_join(., zones) %>%
  group_by(zone) %>%
  distinct(zone, n) %>%
  left_join(., zones) %>%
  left_join(., zone2) %>%
  ggplot(data = .) + 
  geom_polygon(aes(x, z, group = zone, fill = n), col = 1) +
  scale_fill_gradient(low = "blue", high = "red", guide = F) + 
  stat_unique(aes(x = plotx, y = plotz,label = n), geom = "text",
            fontface = "bold", size = rel(5), col = "white") + 
  theme_void() + theme(panel.grid = element_blank())
```
---  
  
   
   
**Pitch Locations by Pitch type**  


```{r, echo=FALSE, dpi = 200}

SZ = data.frame(x = c(-.95,.95,.95,-.95,-.95), z = c(1.6,1.6,3.5,3.5,1.6))
plate = data.frame(x = c(-0.95, -0.95, 0.95, 0.95, 0, -0.95),
                   z = c(-0.4, 0, 0, -0.4, -0.7, -0.4))

 

data %>%
  dplyr::rename(Pitch = pitch_name) %>%
  group_by(Pitch) %>%
  ggplot(., aes(plate_x, plate_z, col = Pitch)) +
  # geom_point(alpha = 0.3) +
  theme_bw() + facet_wrap(~Pitch) +
  xlab("") + ylab("") +
  theme_void() +
  theme(strip.text = element_text(colour = 1, face = "bold", size = rel(1.2)),
        panel.grid = element_blank(),
        legend.position = "none") +
  geom_polygon(data = plate, aes(x = x, y = z), col = 1, size = 1.05, fill = "grey") +
  geom_point(alpha = 0.3) +
  geom_path(data = SZ, aes(x = x, y = z), col = 1, size = 1.05)

```

 
---  
  
   
   
Statcast Table for Pitch effectiveness

 

```{r, echo = F}
data %>%
  dplyr::rename(Pitch = pitch_name) %>%
  group_by(Pitch) %>%
  mutate(Swing = ifelse(description %in% c("swinging_strike", "swinging_strike_blocked",
                                           "foul", "foul_tip", "hit_into_play",
                                           "hit_into_play_no_out", "hit_into_play_score"), 1, 0),
         Whiff = ifelse(description %in% c("swinging_strike",
                                           "swinging_strike_blocked", "foul_tip"), 1, 0),
         B = ifelse(type == "B", 1, 0),
         CS = ifelse(description %in% c("called_strike"), 1, 0),
         Watch = ifelse(description %in% c("called_strike"), 1, 0),
         wOBA = sum(woba_value, na.rm = T)/sum(woba_denom, na.rm = T),
         xwOBA = estimated_woba_using_speedangle,
         events = ifelse(events %in% c("hit_by_pitch","walk","sac_fly","sac_bunt"), 1, 0),
         barrel2 = ifelse(launch_angle <= 50 & launch_speed >=
                            98 & launch_speed * 1.5 - launch_angle >= 117 & launch_speed +
                            launch_angle >= 124, 1, 0)) %>%
  summarize(N = n(),
            `% RHB` = round(100 * (length(stand[stand == "R"])/N), 1),
           `% LHB` = round(100 * (length(stand[stand == "L"])/N), 1),
            MPH = round(mean(release_speed), 1),
            `Whiff %` = round(100 * (sum(Whiff)/sum(Swing)), 1),
            `Swing %` = round(100 * (sum(Swing)/N), 1),
            # `B:CS` = round(sum(B)/sum(CS), 1),
            `Called Strike %` = round(100 * (sum(Watch)/N), 1),
            # BBE = sum(type =="X"),
            # Brl = sum(barrel2, na.rm = T),
            `Barrel %` = round(100 * (sum(barrel2, na.rm = T)/sum(type =="X")), 1),
            wOBA = round(mean(wOBA, na.rm = T), 3),
            # xwOBA = round(mean(estimated_woba_using_speedangle, na.rm = T), 3),
            `EV (mph)` = round(mean(launch_speed[type =="X"], na.rm = T), 1)) %>%
  arrange(desc(N)) %>%
  knitr::kable(format = "markdown")
```